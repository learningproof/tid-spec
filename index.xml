<?xml version='1.0' encoding='utf-8'?>
<?xml-stylesheet type="text/xsl" href="rfc2629.xsl" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<?rfc toc="yes" ?>
<?rfc sortrefs="yes" ?>
<?rfc symrefs="yes" ?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" category="info"
  ipr="trust200902" submissionType="IETF"
  docName="draft-multiformats-tid-01"
  tocInclude="true" sortRefs="true" symRefs="true" version="1">

<front>
  <title>The Time-Ordered ID and b32tid Binary Encoding</title>
  <seriesInfo name="Internet-Draft" value="draft-multiformats-tid-01"/>
  <author initials="Aaron" surname="Goldman" fullname="Aaron Goldman">
    <organization>3Box</organization>
    <address>
      <postal>
        <street>TODO</street>
        <city>New York</city>
        <region>NY</region>
        <code>TODO</code>
        <country>US</country>
      </postal>
      <phone>TODO</phone>
      <email>goldmanaaron@gmail.com</email>
      <uri>TODO</uri>
    </address>
  </author>

  <author initials="J." surname="Caballero" fullname="Juan Caballero">
    <organization>learningProof uG</organization>
    <address>
      <postal>
        <street>Kiefholzstrasse</street>
        <city>Berlin</city>
        <region>Berlin</region>
        <code>12435</code>
        <country>Germany</country>
      </postal>
      <phone>+1 415 555 5555</phone>
      <email>bumblefudge@learningproof.xyz</email>
      <uri>http://learningproof.xyz/</uri>
    </address>
  </author>

  <date month="September" day="02" year="2024" />
  <area>ART</area>
  <workgroup />
  <keyword>base-encoding</keyword>
  <keyword>base32</keyword>
  <keyword>timestamp</keyword>
  <keyword>distributed systems</keyword>

  <abstract>
    <t>
Developed for use in a high-bandwidth distributed social networking context, the
TID is essentially a highly-compact UUIDv6 variant that optimizes for a few
specific properties (most notably being sortable both bytewise and lexically)
and fits into the space-efficient `int64` type of languages that support it.
It uses a bespoke base-32 encoding alphabet rather than the similar base32hex
encoding, which mandates a final padding character.
    </t>
  </abstract>

  <note title="Feedback">
    <t>
This specification is part of an initiative of the
<eref target="https://iucca.tech/">Institute for User Control, Care, and
Authenticity</eref> to better-document and promote tooling from the Multiformats
developer community. This community currently has no formal home beyond an
<eref target="https://mailarchive.ietf.org/arch/browse/multiformats/">IETF
mailing list</eref> while a working group charter is being proposed. Feel free
to use our issue tracker on github for specification-level issues, or inquire
about use-cases or applications on the mailing list.
</t>
  </note>
</front>

<middle>
  <section anchor="intro" title="Introduction">
    <t>
The TID is essentially a UUIDv6 variant that optimizes for a few specific
properties: 1.) sortable both bytewise and lexically when encoded with a base32
variant (also specified in this document); 2.) collision-resistant up to a 1024
independent parallel timestamping services, with this set of 1024 broken up in 3
contiguous namespace to support various use-cases described below; 3.) based on
microseconds since unix epoch to simplify translation to other timestamp
formats; 4.) fits in an `int64`; and 5.) works well across the type systems or
most major compiled languages in use today for application-level development.
    </t>
    <t>
Many minor choices, such as the choice of code points in the alternate base32
encoding and the signed nature of the timestamp bytespace are primarily informed
by cross-language ergonomics.
    </t>
    <t>
  </section>
  <section anchor="components" title="The `base32tid` Encoding Alphabet">
    <t>
The 32 code points chosen to encode from binary, in order, are:
      <figure>
        <artwork>
value               1111111111222222222233
          01234567890123456789012345678901
encoding  234567abcdefghijklmnopqrstuvwxyz
        </artwork>
      </figure>
    </t>
    <t>
This differs from the canonical `base32hex` encoding in two ways. Firstly, it is
not padded (more on this below). Secondly, it omits 4 different characters from
the 36 hexadecimals (`1`, `8`, `9`, and `0` rather than `w` `x` `y` and `z`) to
minimize visual human error discerning 1s and Is, 0s and Os.
    </t>
  </section>
  <section anchor="components" title="The Timestamp Input">
    <t>
The form of timestamp used to generate a TID is the number microseconds since
the Unix epoch (1970-01-01T00:00:00+00:00), i.e. an RFC-5102
`dateTimeMilliseconds`. In cases where a timestamping service may be returning
timestamps faster than once every millisecond, uniqueness should be favored over
millisecond accuracy; i.e., the ID generator should return the current
millisecond since epoch OR the last millisecond returned plus 1, whichever is
greater.
    </t>
    <t>
Note that the range of times that fit in the `int54` is actually
purposefully limited to 2^53 by dropping the negative half of the range. This is
to avoid a quirk of the Java type system that converts 54-byte integers to
floats. The following tables shows the min, zero, and max values of the integer
range of milliseconds, expressed in the 11-codepoint `base32tid` encoding:
    </t>
    <t>
      <figure>
        <artwork>
s222-222-2222 1684-07-28T00:12:25.259008 min  i64
2222-222-2222 1970-01-01T00:00:00.000000 zero i64
bzzz-zzz-zzzz 2255-06-05T23:47:34.740992 max  i64
        </artwork>
      </figure>
    </t>
  </section>
  <section anchor="components" title="Node Identifier">
    <t>
The `node` identifier, by analogy to the equivalent element in an RFC-9562
UUIDv6, is a spatially-unique identifier, but from much smaller space (10 bits,
as opposed to UUIDv6's 48 bits). It is divided into three contiguous ranges. The
first 32 values (0-31, i.e. "20" - "2z" base-encoded) are reserved for "best
effort" TIDs. The bulk of the range, (32-991, i.e. "30" - "yz" base-encoded) is
reserved for context-dependent use. The remaining 32 entries (992-1023, i.e.
"z0" - "zz" base-encoded) are reserved for globally unique TIDs.
    </t>
    <t>
"Best effort" node identifiers can be generated without coordination but may
collide.
    </t>
    <t>
Context-dependent should be use in the context of a specific application where
they can be derived stably from application context. The application developer
should take steps to ensure the that in any given time range, no node
identifiers are in simultaneous use by two different actors. No process is
specified for coordinating leases of node identifiers to actors.
    </t>
    <t>
Globally-unique node identifiers should only be used after being registered
globally. At time of writing, there is only one public TimeID service
operating.
    </t>
    <t>
      <texttable anchor="nodeid-global-registry" title="Registry of Global TID Services">
        <ttcol align="center">NodeID</ttcol>
        <ttcol align="center">URL</ttcol>
        <ttcol align="center">public key</ttcol>
        <ttcol align="center">from</ttcol>
        <ttcol align="center">to</ttcol>

        <c>z0</c><c>http://ccn.bz/tid</c><c>n/a</c><c>2222-222-2222</c><c>ongoing</c>
      </texttable>
    </t>
  </section>
  <section anchor="components" title="String Format">
    <t>
The TimeID concatenates the timestamp and the node identifier. The string
format is 11 code points of timestamp and 2 code points of node identifier, displayed for readability with `-` segment dividers after the 4th, 7th, and 11th code points:
    </t>
    <t>
      <figure>
        <artwork>
TTTT-TTT-TTTT-CC
        </artwork>
      </figure>
    </t>
    <t>
Since each code point in base32-encoding represents 5 bits, we need to
sign-extend the 54 bits of the time stamp to 55 bits to convert to 11 char of
b32.
    </t>
    <t>
 We can take the timestamp <code>2024-07-19T09:40:46.480310</code> as an example
 to show the process. This is <code>1721382046481</code> in seconds since Unix
 epoch. On a node with identifer <code>01</code>, this base-encodes to:
    </t>
    <t>
      <figure>
        <artwork>
3kxn-lhr-3gxq-23
 | |   |    |  |
 | |   |    |  NodeID 0-1023
 | |   |    microsecond
 | |   second
 | 10 hours (9.54 hours)
 year (1.115 years)
        </artwork>
      </figure>
    </t>
When using TimeIDs in string form, "prefixes" can be used to mask ranges, i.e.
    <t>
    </t>
    <t>
      <texttable anchor="tid-range-examples" title="Examples of TID masks as ranges">
        <ttcol align="center">start</ttcol>
        <ttcol align="center">end</ttcol>
        <ttcol align="center">tid or mask</ttcol>
        <c>2024-07-19T09:40:46.480310</c><c>2024-07-19T09:40:46.480310</c><c>3kxn-lhr-3gxq</c>
        <c>2024-07-19T09:40:46.434304</c><c>2024-07-19T09:40:47.482879</c><c>3kxn-lhr</c>
        <c>2024-07-19T04:28:52.498432</c><c>2024-07-19T14:01:32.236799</c><c>3kxn</c>
        <c>2023-07-08T13:57:40.263936</c><c>2024-08-18T19:23:52.352767</c><c>3k</c>
      </texttable>
    </t>
  </section>
</middle>

<back>
  <references>
    <name>Normative References</name>
    <reference anchor="RFC4648" target="https://www.rfc-editor.org/info/rfc4648">
      <front>
        <title>The Base16, Base32, and Base64 Data Encodings</title>
        <author fullname="S. Josefsson" initials="S." surname="Josefsson"/>
        <date month="October" year="2006"/>
      </front>
      <seriesInfo name="RFC" value="4648"/>
      <seriesInfo name="DOI" value="10.17487/RFC4648"/>
    </reference>
    <reference anchor="RFC9562" target="https://www.rfc-editor.org/info/rfc9562">
      <front>
        <title>Universally Unique IDentifiers (UUIDs)</title>
        <author fullname="K. Davis" initials="K." surname="Davis"/>
        <author fullname="B. Peabody" initials="B." surname="Peabody"/>
        <author fullname="P. Leach" initials="P." surname="Leach"/>
        <date month="May" year="2024"/>
      </front>
      <seriesInfo name="RFC" value="9562"/>
      <seriesInfo name="DOI" value="10.17487/RFC9562"/>
    </reference>
  </references>

  <section anchor="appendix-a" title="Test Vectors">
    <t>
For clarity, we've added a few illustrative test vectors to those used in RFC
9562, i.e. the 60-bit timestamp: 0x1EC9414C232AB00 (138648505420000000), i.e.
Tuesday, February 22, 2022 2:22:22.000000 PM GMT-05:00.   
    </t>
  </section>
  <section anchor="acknowledgements" title="Acknowledgements">
    <t>
The editors would like to thank the following individuals for feedback on and
implementations of the specification (in alphabetical order):
    </t>
  </section>
  </section>
</back>
</rfc>